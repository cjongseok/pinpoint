#!/bin/bash
TRUE="true"
FALSE="false"
SCRIPT_NAME=$0
SCRIPT_DIR=$(dirname $(readlink -e $SCRIPT_NAME))

. ${SCRIPT_DIR}/tools.sh

HBASE_SHELL="${HBASE_HOME}/bin/hbase shell"
HBASE_CONF_SITE=$HBASE_CONF_DIR/hbase-site.xml
HBASE_SCRIPT_CREATE_TABLES=/opt/hbase_scripts/hbase-create.hbase
HBASE_SCRIPT_DROP_TABLES=/opt/hbase_scripts/hbase-drop.hbase
TABLE_EXISTENCE_CHECKER="/opt/check_table_existence.sh /opt/hbase_tables.list"
#TODO: TABLE_SCHEME_CHECKER=

TOMCAT_DAEMON=${CATALINA_HOME}/bin/catalina.sh
TOMCAT_CMD_START="${TOMCAT_DAEMON} run"
TOMCAT_CMD_STOP="${TOMCAT_DAEMON} stop"

WEBAPP_COLLECTOR=${PINPOINT_HOME}/collector
WEBAPP_WEB=${PINPOINT_HOME}/web

ACTION_COLLECTOR="collector"
ACTION_WEB="web"

OPTION_DEBUG="--debug"
OPTION_CONFIG="--config"

APP_HOME=$SCRIPT_DIR
PID_DIR=$APP_HOME/logs/pid
PID_FILE=hbase.pid

unset action
debug=$FALSE
unset conf_dir
unset namenode_format

function func_usage(){
    #echo "${BASH_ARGV[${#BASH_ARGV[@]}-1]} [OPTION] <ACTION>"
    echo "$SCRIPT_NAME [OPTION] <ACTION>"
    echo ""
    echo "ACTION"
    echo ""
    echo " $ACTION_COLLECTOR"
    echo " $ACTION_WEB"
    echo ""
    echo "OPTION"
    echo " $OPTION_DEBUG"
    echo " $OPTION_CONFIG confdir"
    exit
}

# $1: webapp
function func_set_webapp(){
    local webapp=$1
    local symlink=${CATALINA_APPS}/ROOT

    if [ -d $symlink ]; then
        rm -rf $symlink
        #sudo rm -rf $symlink
    elif [ -f $symlink ]; then
        rm $symlink
        #sudo rm $symlink
    fi

    ln -s $webapp $symlink
    #sudo ln -s $webapp $symlink
}


function func_configure_hbase(){
    CLUSTER_ZOOKEEPER_ADDRESS=${CLUSTER_ZOOKEEPER_ADDRESS:-localhost}
    HDFS_NAMENODE=${HDFS_NAMENODE:-localhost}

    tool_template_fill_in_in_place $HBASE_CONF_SITE "HDFS_NAMENODE" "$HDFS_NAMENODE"
    tool_template_fill_in_in_place $HBASE_CONF_SITE "ZK_QUORUM" "$CLUSTER_ZOOKEEPER_ADDRESS"
}

function func_configure_pinpoint(){
    local webapp_conf_dir=${CATALINA_APPS}/ROOT/WEB-INF/classes
    cp -r $conf_dir/* $webapp_conf_dir/

    CLUSTER_ENABLE=${CLUSTER_ENABLE:-false}
    CLUSTER_ZOOKEEPER_ADDRESS=${CLUSTER_ZOOKEEPER_ADDRESS:-localhost}
    ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}

    COLLECTOR_TCP_PORT=${COLLECTOR_TCP_PORT:-9994}
    COLLECTOR_UDP_STAT_LISTEN_PORT=${COLLECTOR_UDP_STAT_LISTEN_PORT:-9995}
    COLLECTOR_UDP_SPAN_LISTEN_PORT=${COLLECTOR_UDP_SPAN_LISTEN_PORT:-9996}

    HBASE_HOST=${HBASE_HOST:-localhost}
    HBASE_PORT=${HBASE_PORT:-16000}
#    HBASE_PORT=${HBASE_PORT:-2181}

    DISABLE_DEBUG=${DISABLE_DEBUG:-true}


    if [[ $action == $ACTION_COLLECTOR ]]; then

        # set properties
        sed -i "s/cluster.enable=true/cluster.enable=${CLUSTER_ENABLE}/g" $webapp_conf_dir/pinpoint-collector.properties
        sed -i "s/cluster.zookeeper.address=localhost/cluster.zookeeper.address=${CLUSTER_ZOOKEEPER_ADDRESS}/g" $webapp_conf_dir/pinpoint-collector.properties

        sed -i "s/hbase.client.host=localhost/hbase.client.host=${HBASE_HOST}/g" $webapp_conf_dir/hbase.properties
        sed -i "s/hbase.client.port=2181/hbase.client.port=${HBASE_PORT}/g" $webapp_conf_dir/hbase.properties

    elif [[ $action == $ACTION_WEB ]]; then
        sed -i "s/cluster.enable=true/cluster.enable=${CLUSTER_ENABLE}/g" $webapp_conf_dir/pinpoint-web.properties
        sed -i "s/cluster.zookeeper.address=localhost/cluster.zookeeper.address=${CLUSTER_ZOOKEEPER_ADDRESS}/g" $webapp_conf_dir/pinpoint-web.properties

        sed -i "s/admin.password=admin/admin.password=${ADMIN_PASSWORD}/g" $webapp_conf_dir/pinpoint-web.properties

        sed -i "s/hbase.client.host=localhost/hbase.client.host=${HBASE_HOST}/g" $webapp_conf_dir/hbase.properties
        sed -i "s/hbase.client.port=2181/hbase.client.port=${HBASE_PORT}/g" $webapp_conf_dir/hbase.properties
    fi

    if [ "$DISABLE_DEBUG" == "true" ]; then
            sed -i 's/level value="DEBUG"/level value="INFO"/' $web_app_conf_dir/log4j.xml
    fi
}

# TODO: Json based parameter parser
function func_parse_args(){
   local argp=0
   local argv=("$@")
   local argn=${#argv[@]}
   local unset remained_args

   while true; do
       ((remained_args=argn-argp))
       if [ $remained_args -eq 1 ] && [[ ${argv[argp]} == $ACTION_COLLECTOR ]]; then
           action=$ACTION_COLLECTOR
           ((argp++))
           break
       elif [ $remained_args -eq 1 ] && [[ ${argv[argp]} == $ACTION_WEB ]]; then
           action=$ACTION_WEB
           ((argp++))
           break
       elif [[ ${argv[argp]} == $OPTION_DEBUG ]]; then
           debug=$TRUE
           ((argp++))
           continue
       elif [[ ${argv[argp]} == $OPTION_CONFIG ]]; then
           conf_dir=${argv[argp+1]}
           ((argp=argp+2))
           continue
       else
           func_usage
       fi
       break
   done

   echo $action
}


function func_init_log(){
    if [ ! -d $PID_DIR ]; then
         mkdir -p $PID_DIR
    fi

    if [ -f $PID_DIR/$PID_FILE ]; then
         rm $PID_DIR/$PID_FILE
    fi
}

function func_debug(){
    while true; do
#        echo "[$(date)] heartbeat for debugging container..."
        sleep 60
    done
}

# $1: action
# $2: webapp
function func_run_common_action(){
    local local_action=$1
    local local_webapp=$2

    func_set_webapp $local_webapp
    local cmd=$TOMCAT_CMD_START

    # Set config files
    conf_dir=${conf_dir:-${PINPOINT_CONF_DIR}/$local_action}

    func_configure_pinpoint
    func_configure_hbase

    # Create tables on Hbase, if not exists
    if [[ $(eval ${TABLE_EXISTENCE_CHECKER}) == $FALSE ]]; then
        echo "[$(date)] Pinpoint tables do NOT exist on Hbase. Create tables"
        eval $HBASE_SHELL $HBASE_SCRIPT_CREATE_TABLES
    else
        echo "[$(date)] Pinpoint tables already exist on Hbase."
    fi

    if [[ $debug == $TRUE ]]; then
        eval $cmd &
        func_debug
    else
        eval $cmd
    fi
}

function action_run_collector(){
    func_run_common_action "collector" $WEBAPP_COLLECTOR
}

function action_run_web(){
    func_run_common_action "web" $WEBAPP_WEB
}

function func_run_action(){
    case "$action" in
        collector)
            action_run_collector
            ;;
        web)
            action_run_web
            ;;
        *)
            func_usage
            ;;
    esac
}

argv=($@)
echo $@
func_parse_args ${argv[@]}
#func_check_process
func_init_log
#func_edit_hbase_script
func_run_action

#while true; do
#    echo "[$(date)]I am alive!"
#    sleep 5
#done
